What is the time complexity of the following code :

int i, j, k = 0;
for (i = n/2; i <= n; i++) {
for (j = 2; j <= n; j = j * 2) { k = k + n/2;
}
}
If you are thinking o(n^2),0(n) you are wrong. Ask mentor if you still think these are the answer


What will be the time Complexity - Choose the correct Option
A) O(N^2)

B) O(N)

C) O(N Log N)

D) O(Log N)


Answer : option C


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Which of the given options provides the increasing order of complexity of functions f1, f2, f3 and f4 for larger values of n and why ? :
f1(n) = 2^n
f2(n) = n^(3/2)
f3(n) = nLogn
f4(n) = n^(Logn)

Choose the correct Option
A) f3, f2, f4, f1

B) f3, f2, f1, f4

C) f2, f3, f1, f4

D) f2, f3, f4, f1


Answer :  option A

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question 1:-
i = 0;

while (i < n) {

       i = i + 1;

       i = i * 2;

}

Options :-
 O(1)
 O(n)
 O(Log n)   ✔
 O(n Log n)

/////////////////////////////////////////////////////////////////////////////////////////////////////////


Question 2:-
i = 0;

j = 0;

while (i < n) {

    while (j < n) {

 j++;

    }

  i++;

}


O(1)
O(n)  ✔
O(n^2)  
O(n^3)

Explanation:
J Loop Will only Run once from 0 to N-1 when i is 0
rest of the value of i the J value is already N so it will not run.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question 3:-
sum = 0;

for (int i = 0; i < n; i++) {

    for (int j = i; j < n; j++) {

        sum += i * j;

    }

}

O(1)
O(n)
O(n^2)  ✔
O(n^3)



////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question 4:-

for (int i = 1; i <= n; i *= 2) {
  // Some operation
}

O(1)
O(n)
O(n/2)
O(Log n)   ✔




////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question 5:-

for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
        for (int k = 0; k < n; k++) {
            // Some operation
        }
    }
}


O(1)
O(n)
O(n^2)
O(n^3)  ✔

////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question 6:-

if(i>j){
	j==0? j++ : j--;
}


O(1)  ✔
O(n)
O(n^2)
